<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo NexT 主题添加点击爱心效果]]></title>
    <url>%2F2018%2F09%2F21%2FHexo%20NexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E7%88%B1%E5%BF%83%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[给 NexT 主题内添加页面点击出现爱心的效果 创建 js 文件 在/themes/next/source/js/src下新建文件 clicklove.js，接着把该链接下的代码拷贝粘贴到clicklove.js 文件中。代码如下： !function(e,t,a){function n(){c(&quot;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}&quot;),o(),r()}function r(){for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)}function o(){var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e){t&amp;&amp;t(),i(e)}}function i(e){var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)}function s(){return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document); 修改_layout.swig在 \themes\next\layout\_layout.swig 文件末尾添加： &lt;!-- 页面点击小红心 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何整理个人资料]]></title>
    <url>%2F2018%2F09%2F21%2F%E5%A6%82%E4%BD%95%E6%95%B4%E7%90%86%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[序言 在现如今信息爆炸的时代，资料整理的方法显得越来越重要。好的资料整理方法可以让收集的资料发挥出它应有的价值，否则便和没有收集无异。 在平时工作学习中，看到好的技术文档或文章忍不住把它放到收藏夹或使用印象笔记类似的工具裁剪到笔记里，想着日后细细品读。可大多数是没有日后的，这便造成了收集的资料越来越多，越来越混乱，有时候还整理下，但随着数量的增多，发现整理这些东西也是需要很大的时间成本的。这些资料没有发挥其应用的价值，但还舍不得删掉。 之前一直想整理自己的知识体系，想着形成自己的一个知识库，可以随时翻阅。当需要用到哪方便的知识时，可以通过翻阅很快的回忆起来，立即上手。近几年有写博客的习惯，把一些读书笔记和技术的使用过程记录了下来，发挥了些知识库的作用。但总感觉不是那么完美，最近查了下资料，看了些有关资料和个人知识系统整理的文章，有些想法，梳理下加深印象。 整体流程 整个过程应该是这样的： 资料的收集 在现如今网络如此遍历，资料的获取已经不成问题。而如何有效的获取，成为关键。即如何在海一样的信息中，找到我们需要的。现如今我的资料收集方法如下：•搜索引擎 通过搜索引擎关键字，找到自己需要的资料。关键字很重要，必要的时候可以直接使用英文搜索。•微信公众号 通过平时碎片化的阅读，可收集到一些自己认为有价值的文章。•各技术社区 现如今国内各技术社区活跃，文章水平残次不齐。推荐先根据标题略读，发现好的文章后再精度。我们会发现一些高质量文章的产出作者，我们可以订阅他们，之后可重点关注他们的文章。 整理分类 根据我自己的资料，大致分如下几种：•新技术的文档：各种框架文档•技术学习文章：微信公众号文章、各技术社区文章•技术问题：stackoverflow/ 技术问题解决记录•大牛博客•其他工具性网址资料•产出的联系或功能代码 针对以上资料，该如何整理呢？ 工欲善其事必先利其器，整理以上众多资料，整理方法及使用工具如下：•xmind 构建自己的知识体系脑图，作为整个知识库的索引。•evernote 主要存储技术文章和不能公开的自己产出的文档笔记。可按语言和功能所属划分类别，再为文章打好 tag 便于检索。建立临时笔记本暂存未读完的或不知归类的文章，待后续阅读整理。•bookmarks 主要存储技术文档链接、牛人博客地址、工具性网址。同样分好类别，便于检索。•百度云盘 存储开源 pdf 书籍，方便各设备同步。•github 存储自己的周边项目。•博客 产出自己的想法和收获。 消化，产出价值 以上资源分类保存好后，便是消化产出价值了。 第一，在此阶段重要的还是整理，通过阅读我们知道了每篇文章的价值，是否需要留存待日后查询。 原则如下： •可以在网络上轻易找到的，直接删除 •过期的资料直接删除 第二，除了平时碎片化时间的阅读，还需要沉下心来花大块的时间，系统的来学习某项技术。 如何高效的学习消化，日后再整理篇，本篇暂不展开。 通过以上各流程方法，便构建了自己的知识库。完成了以下目标：•梳理自己的知识图谱•通过知识库，可以方便的回忆起某特定技术使用方法。•形成自己的 QA•记录下自己学习的周边项目，作为工作参考 参考•知乎 - 如何有效地进行资料整理？•知乎 - 信息爆炸的时代，如何静心学习?]]></content>
  </entry>
  <entry>
    <title><![CDATA[Markdown 文件的常用编写语法]]></title>
    <url>%2F2018%2F09%2F21%2Fmarkdown%E5%B8%B8%E7%94%A8%E7%BC%96%E5%86%99%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[序言:很久没有写博客了，感觉只要是不写博客，人就很变得很懒，学的知识点感觉还是记不住，渐渐地让我明白，看的越多，懂的越少（你这话不是有毛病吗？应该是看的越多，懂的越多才对），此话怎讲，当你在茫茫的前端知识库里面东看看，西看看的时候，很快就被海量的知识给淹没了，根本就不知道哪些是对的，哪些是错的，感觉好像这个也懂了，那个也懂了，但是真正写起来，脑子又一片空白，又好像什么都不懂，这种状态时有发生，这就叫不懂装懂，最根本的原因就是看的太多，写的太少，所以为了改掉这样毛病，把被动学习变成主动学习，接下来的日子，多写写，即使是写一些学习工作中遇到的坑也是好的，没事翻出来看看，还可以加深印象，好了，废话到处！ 起因：因为现在的前端基本上都用上了前端构建工具，那就难免要写一些 readme 等等的说明性文件，但是这样的文件一般都是.md 的文件，编写的语法自然跟其他格式的文件有所区别，置于为什么要用这种格式的文件，不要问我，我也不知道，大家都这么用，跟着用就对了，如果有大神知道的，不妨告知小弟，本文也是我学习写 markdown 文件的一个笔记吧，仅供参考！ 正文：1、标题的几种写法：第一种： 前面带 #号，后面带文字，分别表示 h1-h6, 上图可以看出，只到 h6，而且 h1 下面会有一条横线，注意，# 号后面有空格 第二种： 这种方式好像只能表示一级和二级标题，而且 = 和 - 的数量没有限制，只要大于一个就行 第三种： 这里的标题支持 h1-h6，为了减少篇幅，我就偷个懒，只写前面二个，这个比较好理解，相当于标签闭合，注意，标题与 #号要有空格 那既然 3 种都可以使用，可不可以混合使用呢？我试了一下，是可以的，但是为了让页面标签的统一性，不建议混合使用，推荐使用第一种，比较简洁，全面 为了搞清楚原理，我特意在网上搜一下在线编写 markdown 的工具，发现实际上是把这些标签最后转化为 html 标签，如图： 在线地址请看这里： http://tool.oschina.net/markdown/ （只是想看看背后的转换原理，没有广告之嫌） 2、列表 我们都知道，列表分为有序列表和无序列表，下面直接展示 2 种列表的写法： 可以看到，无序列表可以用 ， + ， — 来创建，用在线编辑器看，实际上是转换成了 ul&gt;li ，所以使用哪个都可以，推荐使用 吧 有序列表就相对简单一点，只有这一种方式，注意，数字后面的点只能是英文的点，特别注意，有序列表的序号是根据第一行列表的数字顺序来的，比如说： 第一组本来是 3 2 1 倒序，但是现实 3 4 5 ，后面一组 序号是乱的， 但是还是显示 3 4 5 ，这点必须注意了 3、区块引用 比如说，你想对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语句 无序列表下方的便是引用，可以有多种用途，看你的需求了，用法就是在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格 引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等，看看下图： 将上面的代码稍微改一下，全部加上引用标签，就变成了一个大的引用，还有引用里面还有引用，那引用嵌套引用还没有别的写法呢？ 上图可以看出，想要在上一次引用中嵌套一层引用，只需多加一个 &gt;，理论上可以无限嵌套，我就不整那么多了，注意：多层嵌套的 &gt; 是不需要连续在一起的，只要在一行就可以了，中间允许有空格，但是为了好看，还是把排版搞好吧 4、华丽的分割线 分割线可以由 * - _（星号，减号，底线）这 3 个符号的至少 3 个符号表示，注意至少要 3 个，且不需要连续，有空格也可以 应该看得懂吧，但是为了代码的排版好看，你们自己定规则吧，前面有用到星号，建议用减号 5、链接 支持 2 种链接方式：行内式和参数式，不管是哪一种，链接文字都是用 [方括号] 来标记。 上图可知，行内式的链接格式是：链接的文字放在 [] 中，链接地址放在随后的（）中，举一反三，经常出现的列表链接就应该这样写： 链接还可以带 title 属性，好像也只能带 title，带不了其他属性，注意，是链接地址后面空一格，然后用引号引起来 这是行内式的写法，参数式的怎么写： 这就好理解了，就是把链接当成参数，适合多出使用相同链接的场景，注意参数的对应关系，参数定义时，这 3 种写法都可以： 还支持这种写法，如果你不想混淆的话： 其实还有一种隐式链接的写法，但是我觉得那种写法不直观，所以就不写了，经常用的一般就上面 2 种，如果你想了解隐式链接，可以看我文章最后放出的参考地址 6、图片 图片也有 2 种方式：行内式和参数式， 用法跟链接的基本一样，唯一的不同就是，图片前面要写一个！（这是必须的），没什么好说的 7、代码框 这个就比较重要了，很多时候都需要展示出一些代码 如果代码量比较少，只有单行的话，可以用单反引号包起来，如下： 要是多行这个就不行了，多行可以用这个： 多行用三个反引号，如果要写注释，可以在反引号后面写 8、表格 这个写的有点麻烦，注意看 从这 3 种不同写法看，表格的格式不一定要对的非常起，但是为了好看，对齐肯定是最好的，第一种的分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中，还是有点意思的，不过现实出来的结果是，表格外面并没有线框包起来，不知道别人的怎么弄的 9、强调 一个星号或者是一个下划线包起来，会转换为 倾斜，如果是 2 个，会转换为 加粗 10、转义 就不一一列举了，基本上跟 js 转义是一样的 11、删除线 常用的基本上就这些了，如果还有一些常用的，可以跟我留言，我补充上去，我觉得图文并茂才是高效学习的正确姿势，但愿为你的学习带来帮助！ 参考文献： http://www.appinn.com/markdown/ http://sspai.com/25137]]></content>
  </entry>
</search>
