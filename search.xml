<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Maven 私库 Nexus3 搭建使用]]></title>
    <url>%2F2018%2F06%2F20%2FMaven%E7%A7%81%E5%BA%93Nexus3%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Maven 私库 nexus3 搭建使用docker 安装 sonatype/nexus31. 创建挂载目录 mkdir -p v-nexus/data 并修改目录权限 chown -R 200 v-nexus/data 2. 创建部署脚本 # 默认用户名 admin/admin123 version: &apos;3.2&apos; services: nexus: restart: always image: sonatype/nexus3 ports: #自定义端口 - target: 8081 published: 18081 #只有 worker 能访问该端口 protocol: tcp mode: host #版本要求 3.2 volumes: - &quot;/dockerdata/v-nexus/data:/nexus-data&quot; deploy: replicas: 1 restart_policy: condition: on-failure placement: constraints: [node.hostname == lfadmin] 3. 测试访问http://192.168.1.213:18081/ 然后输入 admin 和 admin123 进行登陆即可 ##win10 下 maven 安装 1. 下载 apache-maven-3.5.4-bin.zip 然后解压 2. 添加环境变量, 新建系统环境变量 Maven_HOME 值为解压路径，编辑 path 环境变量添加 %Maven_HOME%\bin 3. 命令窗口测试 mvn -v，只支持 cmd 4. 修改 apache-maven-3.5.4\conf\settings.xml 文件 &lt;!--jar 本地缓存地址 --&gt; &lt;localRepository&gt;D:\MavenRepository&lt;/localRepository&gt; 完整的 setting.xml 设置 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;!-- jar 本地缓存地址 --&gt; &lt;localRepository&gt;D:\MavenRepository&lt;/localRepository&gt; &lt;pluginGroups&gt; &lt;/pluginGroups&gt; &lt;proxies&gt; &lt;/proxies&gt; &lt;servers&gt; &lt;!-- 配置权限, 使用默认用户 --&gt; &lt;server&gt; &lt;!-- 这里的 id 要和项目里的 pom.xml 的 id 一致 --&gt; &lt;id&gt;nexus-releases&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;nexus-snapshots&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; &lt;mirrors&gt; &lt;/mirrors&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;MyNexus&lt;/id&gt; &lt;activation&gt; &lt;jdk&gt;1.4&lt;/jdk&gt; &lt;/activation&gt; &lt;repositories&gt; &lt;!-- 私有库地址 --&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;&gt;Nexus3 Repository&lt;/name&gt; &lt;!-- 注意修改成对应的 IP, 在 nexus 里面复制 public 里面的地址 --&gt; &lt;url&gt;http://192.168.1.213:18081/repository/maven-public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;!-- snapshots 默认是关闭的，需要手动开启 --&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;!-- 插件库地址 --&gt; &lt;pluginRepository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;url&gt;http://192.168.1.213:18081/repository/maven-public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;!-- 激活 profile--&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;MyNexus&lt;/activeProfile&gt; &lt;/activeProfiles&gt; &lt;/settings&gt; 6. 在项目的 pom.xml 修改或添加如下配置 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project ...&gt; .... &lt;!-- 配置 maven 地址 --&gt; &lt;distributionManagement&gt; &lt;repository&gt; &lt;!-- 这里的 id 要和 maven 里的的 settings.xml 的 id 一致 --&gt; &lt;id&gt;nexus-releases&lt;/id&gt; &lt;name&gt;Nexus Release Repository&lt;/name&gt; &lt;url&gt;http://192.168.1.213:18081/repository/maven-releases/&lt;/url&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;id&gt;nexus-snapshots&lt;/id&gt; &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt; &lt;url&gt;http://192.168.1.213:18081/repository/maven-snapshots/&lt;/url&gt; &lt;/snapshotRepository&gt; &lt;/distributionManagement&gt; ... &lt;/project&gt; 7. 编译在 cmd 执行 mvn install 发布上传 jar 执行 mvn deploy，可以到 nexus 地址进行检查 8. 使用私库下载和上传是一样的 nexus3 配置阿里云代理仓库1. 点击Create Repository-&gt;maven2(proxy) 2. 添加名字 aliyun-proxy 设置阿里云 url 地址http://maven.aliyun.com/nexus/content/groups/public 3. 设置阿里云优先级，在 maven-public 里面的 group 把刚刚创建的添加过去并移到 maven-central 上面 4. 设置允许发布 release, 在 maven-release 的 hosted 里面选择 allow redeploy 发布上传 jar 包到 nexus语法： mvn deploy:deploy-file \ -DgroupId=&lt;group-id&gt; \ -DartifactId=&lt;artifact-id&gt; \ -Dversion=&lt;version&gt; \ -Dpackaging=&lt;type-of-packaging&gt; \ -Dfile=&lt;path-to-file&gt; \ -DrepositoryId=&lt; 这里的 id 要和 maven 里的的 settings.xml 的 id 一致 &gt; \ -Durl=&lt;url-of-the-repository-to-deploy&gt; 实战 mvn deploy:deploy-file \ -Dfile=spring-boot-starter-druid-0.0.1-SNAPSHOT.jar \ -DgroupId=cn.binux \ -DartifactId=spring-boot-starter-druid \ -Dversion=0.0.1-SNAPSHOT \ -Dpackaging=jar \ -DpomFile=spring-boot-starter-druid-0.0.1-SNAPSHOT.pom \ -DrepositoryId=nexus-snapshots \ -Durl=http://192.168.1.213:18081/repository/maven-snapshots/ 上传 jar 包到私有 maven 仓库 mvn deploy:deploy-file -Dfile=spring-boot-starter-druid-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-druid -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar -DpomFile=spring-boot-starter-druid-0.0.1-SNAPSHOT.pom -DrepositoryId=nexus-snapshots -Durl=http://192.168.1.213:18081/repository/maven-snapshots/ mvn deploy:deploy-file -Dfile=spring-boot-starter-dubbox-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-dubbox -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar -DpomFile=spring-boot-starter-dubbox-0.0.1-SNAPSHOT.pom -DrepositoryId=nexus-snapshots -Durl=http://192.168.1.213:18081/repository/maven-snapshots/ mvn deploy:deploy-file -Dfile=spring-boot-starter-redis-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-redis -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar -DpomFile=spring-boot-starter-redis-0.0.1-SNAPSHOT.pom -DrepositoryId=nexus-snapshots -Durl=http://192.168.1.213:18081/repository/maven-snapshots/ #这个不是 snapshots 要发布到 releases，注意设置 nexus 为允许发布，看 jar 报后缀，没有 `SNAPSHOT` 就是 release mvn deploy:deploy-file -Dfile=dubbo-2.8.4.jar -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4 -Dpackaging=jar -DrepositoryId=nexus-releases -Durl=http://192.168.1.213:18081/repository/maven-releases/ mvn deploy:deploy-file -Dfile=fastdfs-1.24.jar -DgroupId=org.csource -DartifactId=fastdfs -Dversion=1.24 -Dpackaging=jar -DrepositoryId=nexus-releases -Durl=http://192.168.1.213:18081/repository/maven-releases/ mvn deploy:deploy-file -Dfile=examples-1.0.jar -DgroupId=com.haikang -DartifactId=examples -Dversion=1.0 -Dpackaging=jar -DrepositoryId=nexus-releases -Durl=http://192.168.1.230:18081/repository/maven-releases/ 本地安装 jar 包到本地 maven 仓库 mvn install:install-file -Dfile=spring-boot-starter-druid-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-druid -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar mvn install:install-file -Dfile=spring-boot-starter-dubbox-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-dubbox -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar mvn install:install-file -Dfile=spring-boot-starter-redis-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-redis -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar mvn install:install-file -Dfile=dubbo-2.8.4.jar -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4 -Dpackaging=jar mvn install:install-file -Dfile=fastdfs-1.24.jar -DgroupId=org.csource -DartifactId=fastdfs -Dversion=1.24 -Dpackaging=jar 问题 下载了找不到包，解决，删除项目重新导入，重新 maven 依赖 刚上传或添加了新的 jar 到私库，无法下载，解决，删除本地仓库的该包目录]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 3 爬取百度经验数据]]></title>
    <url>%2F2018%2F05%2F24%2FPython%203%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%BB%8F%E9%AA%8C%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[安装环境准备 直接使用 win10 的 wsl 沙盒 Ubuntu 系统，自带 python3.5 安装 apt install python3-pip pip3 install rsa 注意事项IndentationError: unexpected indent 检查缩进是否一致，空格和 Tab 符号注意区分 ## 实战 通过 cookie 爬百度数据1. 登陆百度，通过浏览器设置 - 内容管理 -cookie，找到百度的 BDUSS 的内容复制 2. 编写脚本 login.py import requests #需要爬数据的 url url = &apos;http://i.baidu.com/&apos; #浏览器访问网站的 cookie 信息 cookie = {&quot;BDUSS&quot;:&quot;----------------------------------------------------AAAAAAAAAAA----------------AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA--&quot;} #requests 请求，获取登录网站页面的内容 html = requests.get(url,cookies=cookie).content #print(html) #把内容保存为文件 with open(&quot;baidu.html&quot;, &apos;wb&apos;) as f: f.write(html) f.close() 3. 在 Ubuntu bash 执行 python3 login.py，会生成一个文件 baidu.html 在当前目录, 打开如果能看到个人信息就证明获取成功 爬百度翻页数据 上面已经登陆成功了，下面直接用 cookie 进行爬数据会被重定向，还需要添加请求头，以及翻页参数 import requests #需要爬数据的 url url = &apos;https://jingyan.baidu.com/user/nucpage/content&apos; #浏览器访问网站的 cookie 信息 cookie = {&quot;BDUSS&quot;:&quot;-----QAAAAAAAAAAAEAAA--1QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA---&quot;} #提供你所使用的浏览器类型、操作系统及版本、CPU 类型、浏览器渲染引擎、浏览器语言、浏览器插件等信息的标识 user_agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot; # 从那个连接来的 referer=&quot;https://jingyan.baidu.com/user/nucpage/content&quot; # 设置请求头 headers = { &quot;User-Agent&quot;: user_agent, &quot;Referer&quot;: referer } # url 参数 # https://jingyan.baidu.com/user/nucpage/content?tab=exp&amp;expType=published&amp;pn=20 params = { &apos;tab&apos;: &apos;exp&apos;, &apos;expType&apos;: &apos;published&apos;, &apos;pn&apos;: &apos;30&apos; } #requests 请求，获取登录网站页面的内容 html = requests.get(url,cookies=cookie,headers=headers).content #print(html) #把内容保存为文件 with open(&quot;baidu.html&quot;, &apos;wb&apos;) as f: f.write(html) f.close() 最终版爬百度经验的个人经验数据import requests #正则 import re #需要爬数据的 url url = &apos;https://jingyan.baidu.com/user/nucpage/content&apos; #浏览器访问网站的 cookie 信息 cookie = {&quot;BDUSS&quot;:&quot;--AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-&quot;} #提供你所使用的浏览器类型、操作系统及版本、CPU 类型、浏览器渲染引擎、浏览器语言、浏览器插件等信息的标识 user_agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot; # 从那个连接来的 referer=&quot;https://jingyan.baidu.com/user/nucpage/content&quot; # 设置请求头 headers = { &quot;User-Agent&quot;: user_agent, &quot;Referer&quot;: referer } #requests 请求, 获取发布数量 published = requests.get(url,cookies=cookie,headers=headers).content #&lt;li&gt;&lt;a class=&quot;on&quot; href=&quot;/user/nucpage/content&quot;&gt; 已发布 (505)&lt;/a&gt;&lt;/li&gt; reg=r&apos;&lt;li&gt;&lt;a class=&quot;on&quot; href=&quot;/user/nucpage/content&quot;&gt; 已发布 \((.*?)\)&lt;/a&gt;&lt;/li&gt;&apos; publishedNum=re.search(reg,published.decode(),re.I|re.M|re.S).group(1) #group(0) 匹配的串，group(1) 匹配的串中第一个括号 print(publishedNum) #算页数, 实际篇数 -1 pages=int((int(publishedNum)-1)/20)+1 print(pages) #把内容保存为文件,&apos;w&apos; 是写，&apos;wb&apos; 是写入 byte with open(&quot;jingyan.md&quot;, &apos;w&apos;) as f: for page in range(0,pages): pn=page*20 print(pn) # url 参数 # https://jingyan.baidu.com/user/nucpage/content?tab=exp&amp;expType=published&amp;pn=20 params = { &apos;tab&apos;: &apos;exp&apos;, &apos;expType&apos;: &apos;published&apos;, &apos;pn&apos;: pn } #requests 请求，获取登录网站页面的内容 html = requests.get(url,cookies=cookie,headers=headers,params=params).content #过滤 reg=r&apos;&lt;a class=&quot;f14&quot; target=&quot;_blank&quot; title=(.*?)&gt;&apos; #re.I 使匹配对大小写不敏感 #re.M 多行匹配，影响 ^ 和 $ #re.S 使 . 匹配包括换行在内的所有字符 #这个是查找此字符串中所有符合条件的内容并返回一个列表 list=re.findall(reg,html.decode(),re.I|re.M|re.S) #写入文件并替换为 markdown 格式 for item in list: item=item.replace(&apos;&quot; href=&quot;&apos;,&apos;](https://jingyan.baidu.com&apos;) item=item.replace(&apos;.html&quot;&apos;,&apos;.html)&apos;) item=item.replace(&apos;&quot;&apos;,&apos;[&apos;) f.write(&quot;%s\n&quot; % item) f.close() 以上整理主要参照下面的文档，如涉及侵权请联系本人，进行删除。 参考： Python：网页的抓取、过滤和保存]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-JVM 参数详解]]></title>
    <url>%2F2018%2F04%2F10%2FJava-JVM%2F</url>
    <content type="text"><![CDATA[JVM 基本参数 -Xmx: 运行最大内存（memory maximum） 是指设定程序运行期间最大可占用的内存大小。如果程序运行需要占用更多的内存，超出了这个设置值，就会抛出 OutOfMemory 异常。堆的最大内存数，等同于 -XX:MaxHeapSize -Xms：启动内存(memory startup) 是指设定程序启动时占用内存大小。一般来讲，大点，程序会启动的快一点，但是也可能会导致机器暂时间变慢。堆的初始化初始化大小 -Xmn：(memory nursery/new) 堆中新生代初始及最大大小，如果需要进一步细化，初始化大小用 -XX:NewSize，最大大小用 -XX:MaxNewSize -Xss：(stack size) 线程栈大小，等同于 -XX:ThreadStackSize jvm 设置的值查看 执行 ps -ef | grep tomcat 或ps -ef | grep java输出如下 root 1882 1 0 8 月 02 ? 01:39:42 /root/SoftwareInstall/jdk/bin/java -Djava.util.logging.config.file=/usr/local/tomcat-geoserver/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Xms3072M -Xmx3072M -Xmn512M -Xss512k -XX:+AggressiveOpts - ..... org.apache.catalina.startup.Bootstrap start 如果没有设置，默认是不会有 -Xms3072M -Xmx3072M -Xmn512M -Xss512k 值打印 docker-compose 设置 jvmenvironment: - JAVA_OPTS= &apos;-Xmx3072m&apos; JVM 问题总结 geoserver 添加图层预览时提示java.lang.OutOfMemoryError: GC overhead limit exceeded 该错误 解决把 -Xmx 设置更大]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix 3.0 基础介绍 [一]（转）]]></title>
    <url>%2F2016%2F10%2F10%2FZabbix%203.0%20%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%20%5B%E4%B8%80%5D%EF%BC%88%E8%BD%AC%EF%BC%89%2F</url>
    <content type="text"><![CDATA[摘要 本文主要讲述 Zabbix 的简介以及 Zabbix 安装及页面设置 Zabbix 3.0 基础介绍 [一]一、Zabbix 介绍zabbix 简介 Zabbix 是一个高度集成的网络监控解决方案，可以提供企业级的开源分布式监控解决方案，由一个国外的团队持续维护更新，软件可以自由下载使用，运作团队靠提供收费的技术支持赢利 zabbix 是一个基于 Web 界面的，提供分布式系统监控以及网络监视功能的企业级的开源解决方案。 zabbix 能监视各种网络参数，保证服务器系统的安全运营，并提供灵活的通知机制以让系统管理员快速定位 / 解决存在的各种问题 zabbix 主要由 2 部分构成 zabbix server 和 zabbix agent，可选组建 zabbix proxy zabbix server 可以通过 SNMP，zabbix agent，fping 端口监视等方法对远程服务器或网络状态完成监视，数据收集等功能。同时支持 Linux 以及 Unix 平台，Windows 平台只能安装客户端 Zabbix 功能 ①具备常见的商业监控软件所具备的功能（主机的性能监控、网络设备性能监控、数据库、性能监控、FTP 等通用协议监控、多种告警方式、详细的报表图表绘制） ②支持自动发现网络设备和服务器（可以通过配置自动发现服务器规则来实现） ③支持自动发现（low discovery）key 实现动态监控项的批量监控（需写脚本） ④支持分布式，能集中展示、管理分布式的监控点 ⑤扩展性强，server 提供通用接口（api 功能），可以自己开发完善各类监控（根据相关接口编写程序实现）编写插件容易，可以自定义监控项，报警级别的设置。 ⑥数据收集 可用和性能检测 支持 snmp(包括 trapping and polling)，IPMI，JMX，SSH，TELNET 自定义的检测 自定义收集数据的频率 服务器 / 代理和客户端模式 灵活的触发器 可以定义非常灵活的问题阈值，称为触发器，从后端数据库的参考值 高可定制的报警 发送通知，可定制的报警升级，收件人，媒体类型 通知可以使用宏变量有用的变量 自动操作包括远程命令 实时的绘图功能 监控项实时的将数据绘制在图形上面 WEB 监控能力 ZABBIX 可以模拟鼠标点击了一个网站，并检查返回值和响应时间 Api 功能 应用 api 功能，可以方便的和其他系统结合，包括手机客户端的使用。 更多功能请查看http://www.zabbix.com/documentation.php Zabbix 版本 Zabbix 3.0 Manual Zabbix 2.4 Manual Zabbix 2.2 Manual Zabbix 2.0 Manual 下载地址：http://www.zabbix.com/documentation.php 本次采用 yum 安装，安装 zabbix3.0. 使用 Centos7 Zabbix 优缺点 优点 1、开源，无软件成本投入 2、Server 对设备性能要求低 3、支持设备多，自带多种监控模板 4、支持分布式集中管理，有自动发现功能，可以实现自动化监控 5、开放式接口，扩展性强，插件编写容易 6、当监控的 item 比较多服务器队列比较大时可以采用被动状态，被监控客户端主动从 7、server 端去下载需要监控的 item 然后取数据上传到 server 端。这种方式对服务器的负载比较小。 8、Api 的支持，方便与其他系统结合 缺点 需在被监控主机上安装 agent，所有数据都存在数据库里，产生的数据据很大, 瓶颈主要在数据库。 Zabbix 监控原理 Zabbix 通过 C/S 模式采集数据，通过 B/S 模式在 web 端展示和配置。 被监控端：主机通过安装 agent 方式采集数据，网络设备通过 SNMP 方式采集数据 Server 端：通过收集 SNMP 和 agent 发送的数据，写入数据库（MySQL，ORACLE 等），再通过 php+apache 在 web 前端展示。 Zabbix 运行条件 Server：Zabbix Server 需运行在 LAMP（Linux+Apache+Mysql+PHP）环境下（或者 LNMP），对硬件要求低 Agent：目前已有的 agent 基本支持市面常见的 OS，包含 Linux、HPUX、Solaris、Sun、windows SNMP：支持各类常见的网络设备SNMP(Simple Network Management Protocol, 简单网络管理协议 Zabbix 监控过程逻辑图 Zabbix 监控类型 硬件监控：适用于物理机、远程管理卡（iDRAC），IPMI（只能平台管理接口） ipmitools:MegaCli（查看 Raid 磁盘） 系统监控: 监控 cpt：lscpu、uptime、top、vmstat 1 、mpstat 1、htop 监控内存： free -m 监控硬盘：df -h、iotop 监控网络：iftop、netstat、ss 应用服务监控：nfs、MySQL、nginx、apache、php、rsync 更详细的监控类型可以参考：http://www.abcdocker.com/abcdocker/1376 引入 Zabbix所有监控范畴，都可以整合到 Zabbix 中 硬件监控：Zabbix、IPMI、lnterface 系统监控：Zabbix、Agent、Interface Java 监控：Zabbix、JMX、lnterface 网络设备监控：Zabbix、SNMP、lnterface 应用服务监控：Zabbix、Agent、UserParameter MySQL 数据库监控：percona-monitoring-plulgins URL 监控：Zabbix Web 监控 ## 二、Zabbix 环境配置 1、环境信息 [root@localhost ~]# cat /etc/redhat-release CentOS Linux release 7.2.1511 (Core) [root@localhost ~]# uname -r 3.10.0-327.28.3.el7.x86_64 2、yum 安装 阿里云 yum 源已经提供了 zabbix3.0，因此我们需要使用官方 yum 源。官方 yum 源下载会比较慢 [root@localhost ~]# rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/3.0/rhel/7/x86_64/zabbix-release-3.0-1.el7.noarch.rpm 问题：为什么要下载 release 版本的 zabbix？ [root@localhost ~]# ls /etc/yum.repos.d/ CentOS-Base.repo CentOS-Media.repo epel.repo.rpmnew CentOS-CR.repo CentOS-Sources.repo epel-testing.repo CentOS-Debuginfo.repo CentOS-Vault.repo zabbix.repo CentOS-fasttrack.repo epel.repo 因为下载这个版本会在 yum.repos.d 下面生成一个 zabbix.repo 的文件 3、安装相关软件包 [root@localhost ~]# yum install zabbix-server zabbix-web zabbix-server-mysql zabbix-web-mysql mariadb-server mariadb -y 注：如果 Server 端也需要监控则需要安装 zabbix-agent 提示：在 Centos7 中，mysql 改名为 mariadb 4、修改 PHP 时区设置 [root@localhost ~]# sed -i &apos;s@# php_value date.timezone Europe/Riga@php_value date.timezone Asia/Shanghai@g&apos; /etc/httpd/conf.d/zabbix.conf #要注意需要改的配置文件是 /etc/httpd/conf.d/zabbix.conf 而不是 /etc/php.ini， 三、数据库设置1. 启动数据库 [root@localhost ~]# systemctl start mariadb 2. 创建 zabbix 数据库及用户 mysql create database zabbix character set utf8 collate utf8_bin; grant all on zabbix.* to zabbix@&apos;localhost&apos; identified by &apos;123456&apos;; exit 3. 导入数据 [root@localhost ~]# cd /usr/share/doc/zabbix-server-mysql-3.0.4/ [root@localhost zabbix-server-mysql-3.0.4]# ll total 1836 -rw-r--r-- 1 root root 98 Jul 22 11:05 AUTHORS -rw-r--r-- 1 root root 687803 Jul 22 11:05 ChangeLog -rw-r--r-- 1 root root 17990 Jul 22 11:06 COPYING -rw-r--r-- 1 root root 1158948 Jul 24 02:59 create.sql.gz -rw-r--r-- 1 root root 52 Jul 22 11:06 NEWS -rw-r--r-- 1 root root 188 Jul 22 11:05 README [root@localhost zabbix-server-mysql-3.0.4]# zcat create.sql.gz |mysql -uzabbix -p123456 zabbix 我们使用 zcat，专门查看 sql.gz 包。和 cat 基本相似 4. 修改 zabbix 配置文件 [root@localhost zabbix-server-mysql-3.0.4]# vim /etc/zabbix/zabbix_server.conf DBHost=localhost #数据库所在主机 DBName=zabbix #数据库名 DBUser=zabbix #数据库用户 DBPassword=123456 #数据库密码 5. 启动 zabbix 及 apache [root@localhost ~]# systemctl start zabbix-server [root@localhost ~]# systemctl start httpd 注意：如果没有启动成功，要看一下是不是 80 端口被占用 6.Web 界面安装 master访问地址：http://192.168.56.11/zabbix/setup.php 点击 Next step 进行安装 首先要确保没有no，如果时区没有改好会提示我们进行修改 账号密码都是我们刚刚在配置文件中设置的，端口默认就是 3306 为我们的 zabbix 起个名字，一会在右上角会显示 最后是展示我们的配置信息，可以查看到哪里有错误 点击 Finish 提示：登录上去之后请立即修改密码 7. 配置 zabbix-agent 端 [root@localhost ~]# vim /etc/zabbix/zabbix_agentd.conf Server=127.0.0.1 修改 Server 端的 IP 地址（被动模式 IP 地址） ServerActive=127.0.0.1 主动模式，主动向 server 端报告 [root@localhost ~]# systemctl start zabbix-agent 查看端口号 [root@localhost ~]# netstat -lntp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN 7806/mysqld tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1062/sshd tcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN 2208/master tcp 0 0 0.0.0.0:10050 0.0.0.0:* LISTEN 11511/zabbix_agentd tcp 0 0 0.0.0.0:10051 0.0.0.0:* LISTEN 11335/zabbix_server tcp 0 0 127.0.0.1:199 0.0.0.0:* LISTEN 2692/snmpd tcp6 0 0 :::80 :::* LISTEN 11408/httpd tcp6 0 0 :::22 :::* LISTEN 1062/sshd tcp6 0 0 ::1:25 :::* LISTEN 2208/master tcp6 0 0 :::443 :::* LISTEN 11408/httpd tcp6 0 0 :::10050 :::* LISTEN 11511/zabbix_agentd tcp6 0 0 :::10051 :::* LISTEN 11335/zabbix_server 10051 为 server 端口，10050 为 agent 端口 四、Web 界面配置 找到 Configuration—-&gt;Hosts 添加一台监控主机 开启后，如果出现错误我们可以看一下 zabbix 的日志 [root@localhost ~]# ls /var/log/zabbix/zabbix_ zabbix_agentd.log zabbix_server.log 当 ZBX 变成绿色的时候，说明监控成功。因为我们没有配置 SNMP、JMX、IPMI 等。所以我发监控 因为我们现在只安装了一台服务器，所以只有一个主机。我们可以查看现在这台主机的 CPU 等及基本的信息 点击 Monitoring—–Graphs，选择我们要监控的内容 我们选择可以随便选择一个进行查看信息 例如：我们查看 CPU 的负载 某一段时间内，CPU 正在处理以及等待 CPU 处理的进程数的之和。Load Average 是从另一个角度来体现 CPU 的使用状态的。 这些监控其实就是 zabbix 在数据库查找数据，然后使用 jd 进行画图Zabbix 性能依赖于 mysql 数据库 五、Zabbix 页面安全设置1、设置默认账号密码 设置完中文 六、Zabbix 菜单说明Zabbix 上方的菜单简单介绍说明 Doshboard 下面可以设置你想设置的图形，添加方法如下： 这时，就可以找到你喜爱的了，直接打开 screens 其实就是一个聚合图形，可以把多个图片合在一起。然后放在大屏幕上，供别人查看 maps 就是一个架构图 Status of Zabbix 就是一个状态栏 第一行是 Server 是否运行 [yes] 和后面的运行地址 第二行监控的机器 （启用的 / 关闭的 / 模板） 第三行监控项 （启用的 / 关闭的 / 不支持的） 第四行触发器的状态 （启用的 / 关闭的 /【故障 / 正常】） 第五行 当前用户数量 （在线数量） 第六行 zabbix 每秒可以收到的一个新值 告警的级别 我们可以设置报警响铃，让他在前端响 我们首页的监控列表是可以随意拖动的 我们还可以将它关闭，并且设置刷新时间 Zabbix 基础完! 转载自：Zabbix 3.0 基础介绍 [一] | abcdocker 运维博客]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT 主题内接入网页在线联系功能]]></title>
    <url>%2F2015%2F02%2F26%2FHexo%20NexT%E4%B8%BB%E9%A2%98%E5%86%85%E6%8E%A5%E5%85%A5%E7%BD%91%E9%A1%B5%E5%9C%A8%E7%BA%BF%E8%81%94%E7%B3%BB%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[之前有访问过一些大佬的个人博客，里面有个在线联系功能，看着不错，所以也试着在自己的站点上接入了此功能。 注册 首先在 DaoVoice 注册个账号，点击 -&gt;邀请码 是2e5d695d。 完成后，会得到一个app_id，后面会用到： 修改 head.swig修改 /themes/next/layout/_partials/head.swig 文件，添加内容如下： {% if theme.daovoice %} (function(i,s,o,g,r,a,m){i["DaoVoiceObject"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)})(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice") daovoice('init', {app_id: "{{theme.daovoice_app_id}}" }); daovoice('update'); {% endif %} 位置贴图： 主题配置文件 在_config.yml文件中添加内容： # Online contact daovoice: true daovoice_app_id: # 这里填你刚才获得的 app_id 聊天窗口配置 附上我的聊天窗口的颜色、位置等设置信息： 至此，网页的在线联系功能已经完成，重新 hexo g，hexo d 上传 GitHub 后，页面上就能看到效果了。 就比如说你现在往右下角看看(～￣▽￣)～ ，欢迎撩我（滑稽）。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT 主题内加入动态背景]]></title>
    <url>%2F2015%2F02%2F25%2FHexo%20NexT%E4%B8%BB%E9%A2%98%E5%86%85%E5%8A%A0%E5%85%A5%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF%2F</url>
    <content type="text"><![CDATA[主题内新添加内容 _layout.swig 找到 themes\next\layout\_layout.swig 文件，添加内容：在 &lt;body&gt; 里添加： &lt;div class=&quot;bg_content&quot;&gt; &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt; &lt;/div&gt; 仍是该文件，在末尾添加： &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/dynamic_bg.js&quot;&gt;&lt;/script&gt; dynamic_bg.js 在 themes\next\source\js\src 中新建文件dynamic_bg.js，代码链接中可见：dynamic_bg.js custom.styl在 themes\next\source\css\_custom\custom.styl 文件末尾添加内容： .bg_content { position: fixed; top: 0; z-index: -1; width: 100%; height: 100%; } 以上整理主要参照下面的文档，如涉及侵权请联系本人，进行删除。 参考： Hexo NexT 主题内加入动态背景]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OSSFS 实现阿里云 OSS 文件系统数据共享]]></title>
    <url>%2F2015%2F01%2F24%2FOSSFS%E5%AE%9E%E7%8E%B0%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[阿里云 ESC 服务器挂载 OSS 文件系统 ossfs 能让您在 Linux/Mac OS X 系统中把 Aliyun OSS bucket 挂载到本地文件 系统中，您能够便捷的通过本地文件系统操作 OSS 上的对象，实现数据的共享。 阿里云 oss 官方：ossfs 挂载，您可以理解为把挂载的 bucket 当做一个 ecs 目录来操作的，存储文件到挂载的 bucket 中是占用的这个 bucket 的内存，不会占用您 ecs 的内存。 安装 下载文件 ossfs_1.80.3_centos7.0_x86_64.rpm 到阿里云 安装sudo yum localinstall ossfs_1.80.3_centos7.0_x86_64.rpm 写入 oss 配置echo my-bucket:my-access-key-id:my-access-key-secret &gt; /etc/passwd-ossfs, 例： echo ossfs-xuan:LTAIw5M5SHnIoNcm:ci1Oj7*******ZqDziBj &gt; /etc/passwd-ossfs 更改配置文件权限chmod 640 /etc/passwd-ossfs 创建挂载目录mkdir /ossfs 挂载ossfs ossfs-xuan /ossfs -ourl=oss-cn-shenzhen-internal.aliyuncs.com 额外的命令# 允许 linux 其他用户对改 oss 文件系统进行操作 ossfs ossfs-xuan /ossfs -ourl=oss-cn-shenzhen-internal.aliyuncs.com -o allow_other #卸载挂载 oss 目录 umount /ossfs 可能出现的错误 InvalidBucketName 错误可以看出 BucketName 重复了 ossfs: bad request &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;Error&gt; &lt;Code&gt;InvalidBucketName&lt;/Code&gt; &lt;Message&gt;The specified bucket is not valid.&lt;/Message&gt; &lt;RequestId&gt;5A93BFD701A3E286AC09FDDD&lt;/RequestId&gt; &lt;HostId&gt;ossfs-xuan.ossfs-xuan.oss-cn-shenzhen-internal.aliyuncs.com&lt;/HostId&gt; &lt;BucketName&gt;ossfs-xuan.ossfs-xuan&lt;/BucketName&gt; &lt;/Error&gt; 解决：-ourl=oss-cn-shenzhen-internal.aliyuncs.com不需要带BucketName]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7.4 安装 GlusterFS]]></title>
    <url>%2F2015%2F01%2F23%2FCentOS7.4%E5%AE%89%E8%A3%85GlusterFS%2F</url>
    <content type="text"><![CDATA[介绍 Gluster 是一个大尺度文件系统。 主要功能 简单卷 distribute volume 分布式卷，两台主机的磁盘融合一个磁盘 stripe volume 条带卷，一个文件分成数据块存储到不同的地方 replica volume 复制卷，一个文件分别保存到两台主机 复合卷 1+2，1+3，2+3，1+2+3 总结常用命令gluster peer status #查看集群各主机连接状态 gluster volume list# 查看挂载卷信息 gluster volume list #查看卷列表 #创建挂在卷，force 忽略在 root 目录创建挂在卷的警告 gluster volume create swarm-volume replica 3 worker:/xuan/docker/gluster-volume home:/xuan/docker/gluster-volume xuanps:/xuan/docker/gluster-volume force gluster volume start swarm-volume #启动 gluster volume stop swarm-volume #停止 gluster volume delete swarm-volume #删除 ，了文件还会保留 #挂载本地目录到 glusterfs 卷（swarm-volume），在本地目录添加的会自动同步到其他挂载卷 #eg 在本机 mnt 添加文件，其他 volume-name 目录也会添加 mount [- 参数] [设备名称] [挂载点] mount -t glusterfs worker:/swarm-volume /mnt/ umount worker:/swarm-volume #卸载了就不会同步了 #重置，删除所有数据 systemctl stop glusterd rm -rf /var/lib/glusterd/ systemctl start glusterd #删除节点 gluster peer detach home 安装 准备工作： 三台局域网主机（centos7 修改主机名 ） hostnameip备注xuanpsleft-aligned10.14.0.1 workercentered10.14.0.4homeright-aligned10.14.0.5 三台都需要安装 GlusterFS # 搜索 glusterfs 可安装的版本 yum search centos-release-gluster #安装最新长期稳定版本 (Long Term Stable) 的 gluster 软件 yum -y install centos-release-gluster #安装 glusterfs-server yum --enablerepo=centos-gluster*-test install glusterfs-server glusterfs -V #测试 systemctl enable glusterd #开机启动 systemctl start glusterd #启动 systemctl status glusterd #查看是否正常运行 #修改 hosts 不然不能通过主机名连接到对方 vim /etc/hosts #---------- 三台都要添加如下设置 -------------------------- 10.14.0.1 xuanps 10.14.0.4 worker 10.14.0.5 home #------------------------------------------------------ #从 xuanps 上执行下面两条，其他主机不用执行 gluster peer probe worker gluster peer probe home #三台都执行该命令是否都是 connected gluster peer status #查看挂载卷信息 gluster volume info #创建挂在卷，force 忽略在 root 目录创建挂在卷的警告 gluster volume create volume-name replica 3 worker:/xuan/docker/gluster-volume/test home:/xuan/docker/gluster-volume/test xuanps:/xuan/docker/gluster-volume/test force #启动 gluster volume start volume-name #启动 nfs 同步，测试需验证，这里要不要开启 gluster volume set volume-name nfs.disable off #挂载本地目录到 glusterfs 卷（volume-name），在本地目录添加的会自动同步到其他挂载卷 #eg 在本机 mnt 添加文件，其他 volume-name 目录也会添加 mount -t glusterfs worker:/volume-name /mnt/ 以上整理主要参照下面的文档，如涉及侵权请联系本人，进行删除。 参考 官方文档 centos 官方安装手册 基于 GlusterFS 实现 Docker 集群的分布式存储]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7.4 安装 OpenVpn]]></title>
    <url>%2F2015%2F01%2F22%2FCentOS7.4%E5%AE%89%E8%A3%85OpenVpn%2F</url>
    <content type="text"><![CDATA[openvpn service 安装与配置1. 下载脚本 wget https://git.io/vpn -O openvpn-install.sh# 添加执行权限 chmod +x openvpn-install.sh #总结 wget https://git.io/vpn -O openvpn-install.sh &amp;&amp; bash openvpn-install.sh 2. 运行脚本./openvpn-install.sh, 设置如下 监听地址设置为空 IP address: Protocol:[2]TCP Port:1194 不选 DNS: client name: client_k2 External IP : 112.74.51.136 3. 配置服务端 vim /etc/openvpn/server.conf# 指定 ip, 所以记录 ip 没效果屏蔽 ;ifconfig-pool-persist ipp.txt ;push &quot;redirect-gateway def1 bypass-dhcp&quot; #推送服务器路由 push &quot;route 10.14.0.0 255.255.255.0&quot; #推送 k2 客户端子网路由到所有客户端除了 ccd 里面申明了该路由的客户端 push &quot;route 192.168.123.0 255.255.255.0&quot; #添加服务器路由，访问客户端 K2 的 192.168.123.0 子网通过网关 10.14.0.2(k2 客户端 ip) route 192.168.123.0 255.255.255.0 10.14.0.2 #添加客户端配置目录，启用之后，每个客户端必须指定 ip，否正有可能访问不了其他客户端的子网 client-config-dir ccd #客户端访问客户端 client-to-client 4. 配置客户端路由 mkdir /etc/openvpn/ccd 和 vim /etc/openvpn/ccd/client_k2# 设置该客户端的 vpn 的 ip 是 10.14.0.2, 子网掩码必须是 255.255.255.0，如果启用 ccd，必须配置 ifconfig-push 10.14.0.2 255.255.255.0 #申明 192.168.123.0 是自己的子网，并且让子网也可以访问 vpn 服务器，申明之后不会推送该路由到该客户端 iroute 192.168.123.0 255.255.255.0 route 192.168.123.0 255.255.255.0 5. 添加客户端./openvpn-install.shSelect an option[1-4]:1 (add a new user) client name: client_worker # 编辑配置文件 vim /etc/openvpn/server.conf #重启生效 systemctl restart openvpn@server.service systemctl enable openvpn@server.service #注释掉客户端的 #setenv opt block-outside-dns 6. 下载 ovpn 文件，并修改配置，注释调 #setenv opt block-outside-dns 7. 常用命令# 重启生效 systemctl restart openvpn@server.service #使能服务 systemctl enable openvpn@server.service #ssh 下载文件 scp root@112.74.51.136:/root/client_xuan_ubuntu.ovpn ./ openvpn client 安装与配置1. 安装yum update #更新 yum install vim #安装 vim yum install epel-release #添加 epel 源 yum clean all # 可选 yum update # 可选 yum makecache # 可选 yum install openvpn iptables-services #安装 openvpn scp root@112.74.51.136:~/client_vm.ovpn /etc/openvpn/client/ #下载客户端配置 #注释掉客户端的 vim /etc/openvpn/client/client_vm.ovpn #setenv opt block-outside-dns #----------------------- 废弃 ------------------------------------------------ openvpn --daemon --cd /etc/openvpn/client --config client_vm.ovpn --log-append /etc/openvpn/openvpn.log #启动 tail -100f /etc/openvpn/openvpn.log #查看日志 ps -ef | grep openvpn #查看 openvpn 进程 kill &lt;pid&gt; #杀死进程 #--------------------- 废弃结束 ------------------------------------------------------ #openvpn-client 启动服务，反斜杠转义字符，实际名称是 openvpn-client@.service vim /lib/systemd/system/openvpn-client\@.service #修改 ExecStart=/usr/sbin/openvpn --suppress-timestamps --nobind --config %i.conf #为 ExecStart=/usr/sbin/openvpn --daemon --config %i.ovpn --log-append /etc/openvpn/openvpn.log #防止已经启动，@符号后面等效与 %i, 所以这里为客户端配置的名字 systemctl restart openvpn-client@client_vm #开机启动 systemctl enable openvpn-client@client_vm 以上整理主要参照下面的文档，如涉及侵权请联系本人，进行删除。 参考 官网 脚本 github 官网 Nyr/openvpn-install openvpn 的一个一键安装脚本“openvpn-install”让 openvpn 重放光彩（需翻墙） How to Configure OpenVPN Server on CentOS 7.3 使用 OpenVPN 互联多地机房及 Dokcer 跨主机 / 机房通讯 扩大 OpenVPN 使用范围，包含服务器或客户端子网中的其他计算机]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7 修改网卡为 eth0]]></title>
    <url>%2F2015%2F01%2F22%2FCentOS7%E4%BF%AE%E6%94%B9%E7%BD%91%E5%8D%A1%E4%B8%BAeth0%2F</url>
    <content type="text"><![CDATA[使用 CentOS-7 最直观的变化就是服务管理了。这里介绍一下。 services 使用了 systemd 来代替 sysvinit 管理 systemd 是 Linux 下的一种 init 软件，由 Lennart Poettering 带头开发，并在 LGPL 2.1 及其后续版本许可证下开源发布。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。与多数发行版使用的 System V 风格 init 相比，systemd 采用了以下新技术：采用 Socket 激活式与总线激活式服务，以提高相互依赖的各服务的并行运行性能；用 cgroups 代替 PID 来追踪进程，以此即使是两次 fork 之后生成的守护进程也不会脱离 systemd 的控制。从设计构思上说，由于 systemd 使用了 cgroup 与 fanotify 等组件以实现其特性，所以只适用于 Linux。systemd 的服务管理程序：systemctl 是主要的工具，它融合之前 service 和 chkconfig 的功能于一体。可以使用它永久性或只在当前会话中启用 / 禁用服务。 启动一个服务：systemctl start postfix.service 关闭一个服务：systemctl stop postfix.service 重启一个服务：systemctl restart postfix.service 显示一个服务的状态：systemctl status postfix.service 在开机时启用一个服务：systemctl enable postfix.service 在开机时禁用一个服务：systemctl disable postfix.service 查看服务是否开机启动：systemctl is-enabled postfix.service;echo $? 查看已启动的服务列表：systemctl list-unit-files|grep enabled CentOS7 修改网卡为 eth0编辑网卡信息[root@linux-node2~]# cd /etc/sysconfig/network-scripts/ #进入网卡目录 [root@linux-node2network-scripts]# mv ifcfg-eno16777728 ifcfg-eth0 #重命名网卡名称 [root@linux-node2network-scripts]# cat ifcfg-eth0 #编辑网卡信息 TYPE=Ethernet BOOTPROTO=static DEFROUTE=yes PEERDNS=yes PEERROUTES=yes IPV4_FAILURE_FATAL=no NAME=eth0 #name 修改为 eth0 ONBOOT=yes IPADDR=192.168.56.12 NETMASK=255.255.255.0 GATEWAY=192.168.56.2 DNS1=192.168.56.2 修改 grub[root@linux-node2~]# cat /etc/sysconfig/grub #编辑内核信息, 添加红色字段的 GRUB_TIMEOUT=5 GRUB_DEFAULT=saved GRUB_DISABLE_SUBMENU=true GRUB_TERMINAL_OUTPUT=&quot;console&quot; GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rhgb net.ifnames=0 biosdevname=0 quiet&quot; GRUB_DISABLE_RECOVERY=&quot;true&quot; [root@linux-node2~]# grub2-mkconfig -o /boot/grub2/grub.cfg #生成启动菜单 Generatinggrub configuration file ... Foundlinux image: /boot/vmlinuz-3.10.0-229.el7.x86_64 Foundinitrd image: /boot/initramfs-3.10.0-229.el7.x86_64.img Foundlinux image: /boot/vmlinuz-0-rescue-1100f7e6c97d4afaad2e396403ba7f61 Foundinitrd image: /boot/initramfs-0-rescue-1100f7e6c97d4afaad2e396403ba7f61.img Done 也可以在开机启动加载安装系统界面设置。 验证是否修改成功[root@linux-node2~]# reboot #必须重启系统生效 [root@linux-node2~]# yum install net-tools #默认 centos7 不支持 ifconfig 需要看装 net-tools 包 [root@linux-node2~]# ifconfig eth0 #在次查看网卡信息 eth0:flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.56.12 netmask 255.255.255.0 broadcast 192.168.56.255 inet6 fe80::20c:29ff:fe5c:7bb1 prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:0c:29:5c:7b:b1 txqueuelen 1000 (Ethernet) RX packets 152 bytes 14503 (14.1 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 98 bytes 14402 (14.0 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 设置主机名解析[root@linux-node1 ~]# cat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.56.11 linux-node1 linux-node1.example.com 192.168.56.12 linux-node2 linux-node2.example.com centos 7 修改主机名的方法 hostnamectl 命令 在 7 版本中，hostname 有三种形式 静态 (Static host name) 动态 (Transient/dynamic host name) 别名(Pretty host name) 查询主机名 hostnamectl 或 hostctl status 查询主机名 hostnamectl status [--static|--transient|--pretty] 修改 hostname hostnamectl set-hostname servername [--static|--transient|--pretty] 删除 hostname hostnamectl set-hostname &quot;&quot; hostnamectl set-hostname &quot;&quot; --static hostnamectl set-hostname &quot;&quot; --pretty 修改配置文件 hostname name vim /etc/hostname 通过 nmtui 修改，之后重启 hostnamed systemctl restart systemd-hostnamed 通过 nmcui 修改，之后重启 hostnamed nmcli general hostname servername systemctl restart systemd-hostnamed 安装 EPEL 仓库和常用命令[root@linux-node1 ~]# rpm -ivh http://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm [root@linux-node1 ~]# yum install -y net-tools vim lrzsz tree screen lsof tcpdump 关闭 NetworkManager 和防火墙[root@linux-node1 ~]# systemctl stop firewalld #关闭防火墙 [root@linux-node1 ~]# systemctl disable firewalld #设置开机不启动 [root@linux-node1 ~]# systemctl stop NetworkManager 关闭 SELinux[root@linux-node1 ~]# vim /etc/sysconfig/selinux SELINUX=disabled #修改为 disabled 检查结果如下 [root@linux-node1 ~]# getsebool getsebool: SELinux is disabled 更新系统并重启[root@linux-node1 ~]# yum update -y &amp;&amp; reboot centos7 设置开机脚本 新建开机脚本vim /root/Dropbox/save/bootstartscript.sh # 添加开机启动脚本 #开机启动 dropbox dropbox start -d 添加开机脚本到启动文件vim /etc/rc.d/rc.local # 开机启动脚本 /bin/sh /root/Dropbox/save/bootstartscript.sh 设置启动脚本生效 chmod +x /etc/rc.d/rc.local]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos 7/6 内核版本由 3.10.0 升级至 4.12.4 方法]]></title>
    <url>%2F2015%2F01%2F21%2FCentos7%E5%86%85%E6%A0%B8%E7%94%B13.10%E5%8D%87%E7%BA%A7%E8%87%B34.12%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[【写在前面】公司打算上 Docker 服务，目前需要安装运行环境，Docker 新的功能除了需要 Centos 7 系统之外，内核的版本高低也决定着使用的效果，所以在此记录下系统内核版本升级过程。注：对于线上环境的内核版本还需要根据实际情况谨慎选择，越新的版本未来可能遇到的问题越多，此文只是记录升级方法而已。 【文章内容】关于内核版本的定义： 版本性质：主分支 ml(mainline)，稳定版(stable)，长期维护版 lt(longterm) 版本命名格式为 “A.B.C”： 数字 A 是内核版本号 ：版本号只有在代码和内核的概念有重大改变的时候才会改变，历史上有两次变化： 第一次是 1994 年的 1.0 版，第二次是 1996 年的 2.0 版，第三次是 2011 年的 3.0 版发布，但这次在内核的概念上并没有发生大的变化 数字 B 是内核主版本号：主版本号根据传统的奇 - 偶系统版本编号来分配：奇数为开发版，偶数为稳定版 数字 C 是内核次版本号：次版本号是无论在内核增加安全补丁、修复 bug、实现新的特性或者驱动时都会改变 一、查看那系统内核版本uname -r 3.10.0-514.el7.x86_64 cat /etc/redhat-release CentOS Linux release 7.3.1611 (Core) 二、升级内核Centos 6 和 Centos 7 的升级方法类似，只不过就是选择的 YUM 源或者 rpm 包不同罢了，下面主要是 Centos 7 的安装方法，中间也会有对于 Centos 6 升级的方法提示。 方法一： Centos 6 YUM 源：http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpmCentos 7 YUM 源：http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm 升级内核需要先导入 elrepo 的 key，然后安装 elrepo 的 yum 源： rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm 仓库启用后，你可以使用下面的命令列出可用的内核相关包，如下图： yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available 上图可以看出，长期维护版本 lt 为 4.4，最新主线稳定版 ml 为 4.12，我们需要安装最新的主线稳定内核，使用如下命令：(以后这台机器升级内核直接运行这句就可升级为最新稳定版) yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64 方法二： 对于一些无法上网的服务器，或者需要安装指定版本内核的需求，我们可以把 kernel image 的 rpm 包下载下来安装，下载地址如下： 下载指定版本 kernel： http://rpm.pbone.net/index.php3?stat=3&amp;limit=1&amp;srodzaj=3&amp;dl=40&amp;search=kernel 下载指定版本 kernel-devel：http://rpm.pbone.net/index.php3?stat=3&amp;limit=1&amp;srodzaj=3&amp;dl=40&amp;search=kernel-devel 官方 Centos 6: http://elrepo.org/linux/kernel/el6/x86_64/RPMS/ 官方 Centos 7: http://elrepo.org/linux/kernel/el7/x86_64/RPMS/ 将 rpm 包下载上传到服务器上，使用下面的命令安装即可： yum -y install kernel-ml-devel-4.12.4-1.el7.elrepo.x86_64.rpm yum -y install kernel-ml-4.12.4-1.el7.elrepo.x86_64.rpm 方法三： 还可以通过源码包编译安装，这种方式可定制性强，但也比较复杂，有需要的可自行查找资料安装，下面只给出各系统版本内核源码包的下载地址：https://www.kernel.org/pub/linux/kernel/ 三、修改 grub 中默认的内核版本 内核升级完毕后，目前内核还是默认的版本，如果此时直接执行 reboot 命令，重启后使用的内核版本还是默认的 3.10，不会使用新的 4.12.4，首先，我们可以通过命令查看默认启动顺序： awk -F\&apos; &apos;$1==&quot;menuentry &quot; {print $2}&apos; /etc/grub2.cfg CentOS Linux (4.12.4-1.el7.elrepo.x86_64) 7 (Core) CentOS Linux (3.10.0-514.el7.x86_64) 7 (Core) CentOS Linux (0-rescue-a43cc2091b4557f1fd10a52ccffa5db2) 7 (Core) 由上面可以看出新内核 (4.12.4) 目前位置在 0，原来的内核 (3.10.0) 目前位置在 1，所以如果想生效最新的内核，还需要我们修改内核的启动顺序为 0： vim /etc/default/grub 注：Centos 6 更改的文件相同，使用命令确定新内核位置后，然后将参数 default 更改为 0 即可。 接着运行 grub2-mkconfig 命令来重新创建内核配置，如下： grub2-mkconfig -o /boot/grub2/grub.cfg 四、重启系统并查看系统内核reboot 系统启动完毕后，可以通过命令查看系统的内核版本，如下： uname -r 4.12.4-1.el7.elrepo.x86_64 到此，Centos 7 内核升级完毕。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT 主题添加点击爱心效果]]></title>
    <url>%2F2015%2F01%2F20%2FHexo%20NexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E7%88%B1%E5%BF%83%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[给 NexT 主题内添加页面点击出现爱心的效果 创建 js 文件 在/themes/next/source/js/src下新建文件 clicklove.js，接着把该链接下的代码拷贝粘贴到clicklove.js 文件中。代码如下： !function(e,t,a){function n(){c(&quot;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}&quot;),o(),r()}function r(){for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)}function o(){var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e){t&amp;&amp;t(),i(e)}}function i(e){var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)}function s(){return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document); 修改_layout.swig在 \themes\next\layout\_layout.swig 文件末尾添加： &lt;!-- 页面点击小红心 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;]]></content>
      <categories>
        <category>Hexo Next</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何整理个人资料]]></title>
    <url>%2F2015%2F01%2F20%2F%E5%A6%82%E4%BD%95%E6%95%B4%E7%90%86%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[序言 在现如今信息爆炸的时代，资料整理的方法显得越来越重要。好的资料整理方法可以让收集的资料发挥出它应有的价值，否则便和没有收集无异。 在平时工作学习中，看到好的技术文档或文章忍不住把它放到收藏夹或使用印象笔记类似的工具裁剪到笔记里，想着日后细细品读。可大多数是没有日后的，这便造成了收集的资料越来越多，越来越混乱，有时候还整理下，但随着数量的增多，发现整理这些东西也是需要很大的时间成本的。这些资料没有发挥其应用的价值，但还舍不得删掉。 之前一直想整理自己的知识体系，想着形成自己的一个知识库，可以随时翻阅。当需要用到哪方便的知识时，可以通过翻阅很快的回忆起来，立即上手。近几年有写博客的习惯，把一些读书笔记和技术的使用过程记录了下来，发挥了些知识库的作用。但总感觉不是那么完美，最近查了下资料，看了些有关资料和个人知识系统整理的文章，有些想法，梳理下加深印象。 整体流程 整个过程应该是这样的： 资料的收集 在现如今网络如此遍历，资料的获取已经不成问题。而如何有效的获取，成为关键。即如何在海一样的信息中，找到我们需要的。现如今我的资料收集方法如下：•搜索引擎 通过搜索引擎关键字，找到自己需要的资料。关键字很重要，必要的时候可以直接使用英文搜索。•微信公众号 通过平时碎片化的阅读，可收集到一些自己认为有价值的文章。•各技术社区 现如今国内各技术社区活跃，文章水平残次不齐。推荐先根据标题略读，发现好的文章后再精度。我们会发现一些高质量文章的产出作者，我们可以订阅他们，之后可重点关注他们的文章。 整理分类 根据我自己的资料，大致分如下几种：•新技术的文档：各种框架文档•技术学习文章：微信公众号文章、各技术社区文章•技术问题：stackoverflow/ 技术问题解决记录•大牛博客•其他工具性网址资料•产出的联系或功能代码 针对以上资料，该如何整理呢？ 工欲善其事必先利其器，整理以上众多资料，整理方法及使用工具如下：•xmind 构建自己的知识体系脑图，作为整个知识库的索引。•evernote 主要存储技术文章和不能公开的自己产出的文档笔记。可按语言和功能所属划分类别，再为文章打好 tag 便于检索。建立临时笔记本暂存未读完的或不知归类的文章，待后续阅读整理。•bookmarks 主要存储技术文档链接、牛人博客地址、工具性网址。同样分好类别，便于检索。•百度云盘 存储开源 pdf 书籍，方便各设备同步。•github 存储自己的周边项目。•博客 产出自己的想法和收获。 消化，产出价值 以上资源分类保存好后，便是消化产出价值了。 第一，在此阶段重要的还是整理，通过阅读我们知道了每篇文章的价值，是否需要留存待日后查询。 原则如下： •可以在网络上轻易找到的，直接删除 •过期的资料直接删除 第二，除了平时碎片化时间的阅读，还需要沉下心来花大块的时间，系统的来学习某项技术。 如何高效的学习消化，日后再整理篇，本篇暂不展开。 通过以上各流程方法，便构建了自己的知识库。完成了以下目标：•梳理自己的知识图谱•通过知识库，可以方便的回忆起某特定技术使用方法。•形成自己的 QA•记录下自己学习的周边项目，作为工作参考 以上整理主要参照下面的文档，如涉及侵权请联系本人，进行删除。 参考 如何有效的进行资料整理？ 信息爆炸的时代，如何静心学习？]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 文件的常用编写语法]]></title>
    <url>%2F2015%2F01%2F19%2Fmarkdown%E5%B8%B8%E7%94%A8%E7%BC%96%E5%86%99%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[序言:很久没有写博客了，感觉只要是不写博客，人就很变得很懒，学的知识点感觉还是记不住，渐渐地让我明白，看的越多，懂的越少（你这话不是有毛病吗？应该是看的越多，懂的越多才对），此话怎讲，当你在茫茫的前端知识库里面东看看，西看看的时候，很快就被海量的知识给淹没了，根本就不知道哪些是对的，哪些是错的，感觉好像这个也懂了，那个也懂了，但是真正写起来，脑子又一片空白，又好像什么都不懂，这种状态时有发生，这就叫不懂装懂，最根本的原因就是看的太多，写的太少，所以为了改掉这样毛病，把被动学习变成主动学习，接下来的日子，多写写，即使是写一些学习工作中遇到的坑也是好的，没事翻出来看看，还可以加深印象，好了，废话到处！ 起因：因为现在的前端基本上都用上了前端构建工具，那就难免要写一些 readme 等等的说明性文件，但是这样的文件一般都是.md 的文件，编写的语法自然跟其他格式的文件有所区别，置于为什么要用这种格式的文件，不要问我，我也不知道，大家都这么用，跟着用就对了，如果有大神知道的，不妨告知小弟，本文也是我学习写 markdown 文件的一个笔记吧，仅供参考！ 正文：1、标题的几种写法：第一种： 前面带 #号，后面带文字，分别表示 h1-h6, 上图可以看出，只到 h6，而且 h1 下面会有一条横线，注意，# 号后面有空格 第二种： 这种方式好像只能表示一级和二级标题，而且 = 和 - 的数量没有限制，只要大于一个就行 第三种： 这里的标题支持 h1-h6，为了减少篇幅，我就偷个懒，只写前面二个，这个比较好理解，相当于标签闭合，注意，标题与 #号要有空格 那既然 3 种都可以使用，可不可以混合使用呢？我试了一下，是可以的，但是为了让页面标签的统一性，不建议混合使用，推荐使用第一种，比较简洁，全面 为了搞清楚原理，我特意在网上搜一下在线编写 markdown 的工具，发现实际上是把这些标签最后转化为 html 标签，如图： 在线地址请看这里： http://tool.oschina.net/markdown/ （只是想看看背后的转换原理，没有广告之嫌） 2、列表 我们都知道，列表分为有序列表和无序列表，下面直接展示 2 种列表的写法： 可以看到，无序列表可以用 ， + ， — 来创建，用在线编辑器看，实际上是转换成了 ul&gt;li ，所以使用哪个都可以，推荐使用 吧 有序列表就相对简单一点，只有这一种方式，注意，数字后面的点只能是英文的点，特别注意，有序列表的序号是根据第一行列表的数字顺序来的，比如说： 第一组本来是 3 2 1 倒序，但是现实 3 4 5 ，后面一组 序号是乱的， 但是还是显示 3 4 5 ，这点必须注意了 3、区块引用 比如说，你想对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语句 无序列表下方的便是引用，可以有多种用途，看你的需求了，用法就是在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格 引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等，看看下图： 将上面的代码稍微改一下，全部加上引用标签，就变成了一个大的引用，还有引用里面还有引用，那引用嵌套引用还没有别的写法呢？ 上图可以看出，想要在上一次引用中嵌套一层引用，只需多加一个 &gt;，理论上可以无限嵌套，我就不整那么多了，注意：多层嵌套的 &gt; 是不需要连续在一起的，只要在一行就可以了，中间允许有空格，但是为了好看，还是把排版搞好吧 4、华丽的分割线 分割线可以由 * - _（星号，减号，底线）这 3 个符号的至少 3 个符号表示，注意至少要 3 个，且不需要连续，有空格也可以 应该看得懂吧，但是为了代码的排版好看，你们自己定规则吧，前面有用到星号，建议用减号 5、链接 支持 2 种链接方式：行内式和参数式，不管是哪一种，链接文字都是用 [方括号] 来标记。 上图可知，行内式的链接格式是：链接的文字放在 [] 中，链接地址放在随后的（）中，举一反三，经常出现的列表链接就应该这样写： 链接还可以带 title 属性，好像也只能带 title，带不了其他属性，注意，是链接地址后面空一格，然后用引号引起来 这是行内式的写法，参数式的怎么写： 这就好理解了，就是把链接当成参数，适合多出使用相同链接的场景，注意参数的对应关系，参数定义时，这 3 种写法都可以： 还支持这种写法，如果你不想混淆的话： 其实还有一种隐式链接的写法，但是我觉得那种写法不直观，所以就不写了，经常用的一般就上面 2 种，如果你想了解隐式链接，可以看我文章最后放出的参考地址 6、图片 图片也有 2 种方式：行内式和参数式， 用法跟链接的基本一样，唯一的不同就是，图片前面要写一个！（这是必须的），没什么好说的 7、代码框 这个就比较重要了，很多时候都需要展示出一些代码 如果代码量比较少，只有单行的话，可以用单反引号包起来，如下： 要是多行这个就不行了，多行可以用这个： 多行用三个反引号，如果要写注释，可以在反引号后面写 8、表格 这个写的有点麻烦，注意看 从这 3 种不同写法看，表格的格式不一定要对的非常起，但是为了好看，对齐肯定是最好的，第一种的分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中，还是有点意思的，不过现实出来的结果是，表格外面并没有线框包起来，不知道别人的怎么弄的 9、强调 一个星号或者是一个下划线包起来，会转换为 倾斜，如果是 2 个，会转换为 加粗 10、转义 就不一一列举了，基本上跟 js 转义是一样的 11、删除线 常用的基本上就这些了，如果还有一些常用的，可以跟我留言，我补充上去，我觉得图文并茂才是高效学习的正确姿势，但愿为你的学习带来帮助！ 以上整理主要参照下面的文档，如涉及侵权请联系本人，进行删除。 参考文献： Markdown 语法说明 (简体中文版) 认识与入门 Markdown]]></content>
      <categories>
        <category>技术工具</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
